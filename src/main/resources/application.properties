#server.servlet.context-path=/bilifuture

server.port=80
################################springboot tomcat相关配置######################################
# 配置Tomcat编码,默认为UTF-8
server.tomcat.uri-encoding=UTF-8
# 配置最大线程数
server.tomcat.min-spare-threads=20
server.tomcat.max-threads=1000


#####################################springboot整合mybatis和数据源相关的配置############################################
#配置mysql数据源
spring.datasource.url=jdbc:mysql://localhost:3306/bilifuture?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

######################## Druid连接池的配置信息  #################
#连接池配置
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
#连接等待超时时间
spring.datasource.maxWait=60000
#配置隔多久进行一次检测(检测可以关闭的空闲连接)
spring.datasource.timeBetweenEvictionRunsMillis=60000
#配置连接在池中的最小生存时间
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,slf4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
##########################################################
 
#security.basic.enabled=false
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
## Mybatis 配置
mybatis.type-aliases-package=com.bilifuture.pojo
mybatis.mapper-locations=classpath:mapper/*.xml
#使全局的映射器启用或禁用缓存。
mybatis.configuration.cache-enabled=true
#全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。
mybatis.configuration.lazy-loading-enabled=true
#当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。
mybatis.configuration.aggressive-lazy-loading=true
#是否允许单条sql 返回多个数据集  (取决于驱动的兼容性) default:true
mybatis.configuration.multiple-result-sets-enabled=true
#是否可以使用列的别名 (取决于驱动的兼容性) default:true
mybatis.configuration.use-column-label=true
#允许JDBC 生成主键。需要驱动器支持。如果设为了true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。  default:false
mybatis.configuration.use-generated-keys=true
#指定 MyBatis 如何自动映射 数据基表的列 NONE：不隐射\u3000PARTIAL:部分  FULL:全部
mybatis.configuration.auto-mapping-behavior=partial
#这是默认的执行类型  （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新）
mybatis.configuration.default-executor-type=simple
#使用驼峰命名法转换字段。
mybatis.configuration.map-underscore-to-camel-case=true
#设置本地缓存范围 session:就会有数据的共享  statement:语句范围 (这样就不会有数据的共享 ) defalut:session
mybatis.configuration.local-cache-scope=session
#设置但JDBC类型为空时,某些驱动程序 要指定值,default:OTHER，插入空值时不需要指定类型
mybatis.configuration.jdbc-type-for-null=null
#如果数据为空的字段，则该字段省略不显示，可以通过添加配置文件，规定查询数据为空是则返回null。
mybatis.configuration.call-setters-on-nulls=true

#############################springboot整合日志，默认是logback[不需要引入新包],但是dubbo用不了，需要用log4j##################################
#LogBack的配置
#logging.config=classpath:logback.xml
logging.config=classpath:log4j2.xml


###################################springboot整合actuator監控 ####################################
info.app.name=bilifuture
info.app.version= 1.0.0
info.app.test=test
management.server.port=9999
management.server.servlet.context-path=/bilifuture
management.endpoints.web.base-path=/base

#可以打开所有的监控点
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

###################################springboot 整合dubbo相关############################################
#springboot整合dubbo有三种方式：
#1.application.properties + dubbo的@service注解服务端暴露服务，@Reference注解消费端引用服务形式
#应用名称
#spring.dubbo.application.name=provider
##注册中心地址
#spring.dubbo.registry.address=zookeeper://127.0.0.1:2181
##协议名称
#spring.dubbo.protocol.name=dubbo
##协议端口
#spring.dubbo.protocol.port=20880
##服务类包目录
#spring.dubbo.scan=com.bilifuture.service

#2.使用dubbo.xml,然后在启动类上使用@ImportResource()引入dubbo的xml配置，可以更加精准的指定要暴露哪个方法

#3.依旧使用@Service注解来暴露服务，使用@Reference来引用服务。同时使用注解API的方式来替代xml配置文件中的标签，将每一个组件手动创建到容器中，
#让dubbo来扫描其他的组件。注解类的配置主要有三点：①注解类加注解@Configuration；②每个注解项添加@Bean注入到容器中；③准确使用注解API。

###############################springboot整合redis####################################
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=6000

##########################springboot整合rocketMq#######################
# 消费者的组名
#apache.rocketmq.consumer.PushConsumer=PushConsumer
## 生产者的组名
#apache.rocketmq.producer.producerGroup=Producer
## NameServer地址
#apache.rocketmq.namesrvAddr=localhost:9876
########################################################################